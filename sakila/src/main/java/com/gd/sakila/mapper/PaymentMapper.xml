<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.PaymentMapper">
	<select id="selectPaymentByCustomer" parameterType="int" resultType="Double">
		SELECT SUM(amount)
		FROM payment
		WHERE customer_id = #{customerId}
	</select>
	
	<select id="selectSalesListByCategory" resultType="java.util.Map">
		SELECT
			category category,
			total_sales totalSales
		FROM sales_by_film_category
	</select>
	
	<select id="selectBestSellerList" resultType="java.util.Map">
		SELECT
			f.title title,
			COUNT(i.film_id) rentalTotal,
			SUM(p.amount) paymentTotal
		FROM rental r, payment p, inventory i, film f
		WHERE r.rental_id = p.rental_id AND i.film_id = f.film_id AND r.inventory_id = i.inventory_id
		GROUP BY i.film_id
		HAVING COUNT(i.film_id) > 30
		ORDER BY COUNT(i.film_id) DESC, f.rental_rate DESC
	</select>
	
	<select id="selectSalesListByStore" resultType="java.util.Map">
		SELECT
			i.store_id storeId,
			SUM(p.amount) totalSales
		FROM payment AS p
		INNER JOIN rental AS r ON p.rental_id = r.rental_id
		INNER JOIN inventory AS i ON r.inventory_id = i.inventory_id
		GROUP BY i.store_id
	</select>
	
	<select id="selectPaymentInfoList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			r.customer_id customerId,
			cl.name name,
			cl.phone phone,
			f.title title,
			r.staff_id staffId,
			r.rental_id rentalId,
			r.rental_date rentalDate,
			DATEDIFF(NOW(), r.rental_date) rentalDuration,
			case when DATEDIFF(NOW(), r.rental_date) > (f.rental_duration)*2
							then f.rental_rate + DATEDIFF(NOW(), r.rental_date) - f.rental_duration + f.replacement_cost
							when DATEDIFF(NOW(), r.rental_date) > f.rental_duration
							then f.rental_rate + DATEDIFF(NOW(), r.rental_date) - f.rental_duration
					ELSE f.rental_rate
					END paymentFee
		FROM customer_list cl
		LEFT JOIN rental r
		ON cl.ID = r.customer_id
		LEFT JOIN inventory i
		ON r.inventory_id = i.inventory_id
		LEFT JOIN film f
		ON i.film_id = f.film_id
		<where> 
			cl.phone = #{phone} 
			<if test="storeId != null">
				AND r.staff_id = #{storeId} AND r.return_date IS NULL
			</if>
			<if test="title != null">
				AND f.title = #{title}
			</if>
		</where> 
	</select>
	
	<select id="selectAmountFromRentalDate" parameterType="int" resultType="Double">
		SELECT
			f.rental_rate
		FROM rental r, inventory i, film f
		WHERE 
			r.inventory_id = i.inventory_id AND i.film_id = f.film_id
			 AND r.rental_id = #{rentalId}
	</select>
	
	<select id="selectYear" resultType="int">
		SELECT 
			year(payment_date) `year` 
		FROM payment p
		GROUP BY `year`
	</select>
	
	<select id="selectSalesListByPeriod" parameterType="int" resultType="java.util.Map">
		SELECT
			MONTH(p.payment_date) `month`,
			SUM(p.amount) `totalAmount`
		FROM payment p
		LEFT JOIN rental r ON p.rental_id=r.rental_id
		<where>
			YEAR(p.payment_date) = #{year}
			<if test="storeId != null">
				AND r.staff_id=#{storeId}
			</if>
		</where>
		GROUP BY YEAR(p.payment_date), `month`
	</select>
	
	<insert id="insertPayment" parameterType="com.gd.sakila.vo.Payment">
		INSERT INTO payment(
			customer_id,
			staff_id,
			rental_id,
			amount,
			last_update
		) VALUES(
			#{customerId},
			#{staffId},
			#{rentalId},
			#{amount},
			NOW()
		)
	</insert>
	
	<update id="updateAmount" parameterType="java.util.Map">
		UPDATE payment SET amount = #{amount} WHERE rental_id = #{rentalId}
	</update>
</mapper>