<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.CustomerMapper">
	<select id="selectCustomerList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			ID customerId,
			name,
			phone,
			SID storeId,
			case when ID IN(SELECT c.ID
                           FROM customer_list c 
                           INNER JOIN 
                           (SELECT  p.customer_id,   
                                    case when DATEDIFF(r.return_date, r.rental_date) &lt; rental_duration 
                                         then 'overdue' END 'overdue'
                           FROM payment p, rental r, inventory i, film f
                           WHERE p.rental_id = r.rental_id AND
                                 r.inventory_id = i.inventory_id AND
                                 i.film_id = f.film_id) t
                           ON c.ID = t.customer_id 
                           GROUP BY c.Id, overdue 
                           HAVING overdue 
                           IS NOT NULL AND COUNT(*) > 15) 
                             then 'BLACK'
                when ID IN (SELECT
                              customer_id
                              FROM payment
                              GROUP BY customer_id
                            HAVING COUNT(customer_id) > 30 
                            AND SUM(amount) > 150)
                           then 'VIP'
         	 END 'blackAndVip'
		FROM customer_list
		<where>
			<if test="searchWord != null">
				AND (name LIKE CONCAT('%', #{searchWord}, '%') OR phone LIKE CONCAT('%', #{searchWord}, '%'))
			</if>
			<if test="storeId != null">
				AND SID = #{storeId}
			</if>
			
		</where>
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<select id="selectCustomerTotal" parameterType="java.util.Map" resultType="int">
		SELECT
			COUNT(*)
		FROM customer_list
		<where>
			<if test="searchWord != null">
				AND (name LIKE CONCAT('%', #{searchWord}, '%') OR phone LIKE CONCAT('%', #{searchWord}, '%'))
			</if>
			<if test="storeId != null">
				AND SID = #{storeId}
			</if>
		</where>
	</select>
	
	<select id="selectCustomerOne" parameterType="int" resultType="java.util.Map">
		SELECT
			c.customer_id customerId,
			c.store_id storeId,
			c.email email,
			c.create_date createDate,
			c.active active,
			cl.name name,
			cl.address address,
			cl.`zip code` zipCode,
			cl.phone phone,
			cl.city city,
			cl.country country
		FROM customer c INNER JOIN customer_list cl
		ON c.customer_id = cl.ID
		WHERE c.customer_id = #{customerId}
	</select>
	
	<select id="selectRentalListByCustomer" parameterType="int" resultType="java.util.Map">
		SELECT 
			r.customer_id customerId,
			f.film_id filmId, 
			f.title title,
			CASE WHEN r.return_date IS NULL AND DATEDIFF(NOW(), r.rental_date) > f.rental_duration
					THEN '연체중'
				WHEN r.return_date IS NULL
					THEN '대여중'
				ELSE ''
			END 'state'
		FROM rental r, inventory i, film f, payment p
		<where>
			r.inventory_id = i.inventory_id AND i.film_id = f.film_id 
			AND p.rental_id = r.rental_id AND r.customer_id = #{customerId}
			<if test="numOfNull == 0">
				AND r.return_date IS NULL
			</if>
			<if test="numOfNull == 1">
				AND r.return_date IS NOT NULL
			</if>
		</where>
	</select>
	
	<select id="selectPhone" parameterType="String" resultType="java.util.Map">
		SELECT
			ID customerId,
			name name
		FROM customer_list
		WHERE phone = #{phone}
	</select>
	
	<insert id="insertCustomer" parameterType="com.gd.sakila.vo.Customer">
		INSERT INTO customer(
			store_id,
			first_name,
			last_name,
			email,
			address_id,
			active,
			last_update
		) VALUES(
			#{storeId},
			#{firstName},
			#{lastName},
			#{email},
			#{addressId},
			1,
			NOW()
		)
	</insert>
	
	<update id="updateCustomerActiveByScheduled">
		UPDATE customer
		SET active = 0
		WHERE customer_id IN (
							SELECT customer_id
							FROM rental
							GROUP BY customer_id
							HAVING DATEDIFF(NOW(), MAX(rental_date)) > 365
							)
							
		UPDATE customer c, 
				(SELECT customer_id, 
						max(rental_date), 
						DATEDIFF(NOW(), max(rental_date))
				FROM rental
				GROUP BY customer_id
				HAVING DATEDIFF(NOW(), max(rental_date)) > 365) A
		SET c.active = 0
		WHERE c.customer_id = A.customer_id
	</update>
</mapper>